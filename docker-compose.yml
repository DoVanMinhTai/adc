version: '3.9'

services:
  nginx:
    image: nginx:1.27.2
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/configuration/custom_proxy_settings.conf:/etc/nginx/conf.d/custom_proxy_settings.conf
    ports:
      - "80:80"
    networks:
      - adc-network
  identity:
    image: quay.io/keycloak/keycloak:26.0.2
    container_name: identity
    command: 'start-dev --import-realm'
    ports:
      - "8080:8080"
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: admin
      KC_DB_PASSWORD: admin
      KC_HTTP_PORT: 8080
    volumes:
      - ./identity/realm-export.json:/opt/keycloak/data/import/realm-export.json
      - ./identity/themes/uithemes:/opt/keycloak/themes
    networks:
      - adc-network
  storefront:
    build: ./storefrontbff
    image: adc/storefront-bff:latest
    entrypoint: ["./wait-for-it.sh", "identity:80", "--timeout=300", "--", "java", "-jar", "/app.jar"]
    environment:
      - SERVER_PORT
    networks:
      - adc-network
  storefront-nextjs:
    image: adc/storefront:latest
    networks:
      - adc-network
  postgres:
    image: postgres:16-alpine
    hostname: ${POSTGRES_HOST}
    container_name: postgres
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - ./docker/postgres/postgresql.conf:/usr/share/postgresql/postgresql.conf
      - ./postgres_init.sql:/docker-entrypoint-initdb.d/postgres_init.sql
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    networks:
      - adc-network

  pgadmin:
    image: dpage/pgadmin4:6.14
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@adc.com
      PGADMIN_DEFAULT_PASSWORD: admin
    networks:
      - adc-network
    volumes:
      - pgadmin:/var/lib/pgadmin
#  book:
#    build:
#      context: ./book
#    ports:
#      - "8081:8081"
#    environment:
#      - SPRING_PROFILES_ACTIVE=prod
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/book
#    networks:
#      - adc-network

  customer:
    container_name: customer
    build:
      context: ./customer
    ports:
      - "8090:8090"
    environment:
       SPRING_PROFILES_ACTIVE: prod
       SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/customer
    networks:
      - adc-network


networks:
  adc-network:
    driver: bridge
    name: adc-network

volumes:
  postgres:
  pgadmin:
